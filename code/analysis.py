# https://github.com/danbider/lightning-pose/blob/cbfd7128f0d959ff7a77f478c0f0d08006cbb9de/lightning_pose/apps/video_diagnostics.py#L22
# ## Plot video predictions and unsupervised losses
# ### Load data
from collections import defaultdict
import pandas as pd
from pathlib import Path
import argparse
import os, sys
import numpy as np
import shutil
import csv

from funcs import convert_slp_to_csv, export_labeled_video, plot_trajectory, compute_metrics_temporal, compute_metrics_pixel_error
from funcs import compute_mean_error

if __name__ == "__main__":
    print(argparse.__version__)
    print("*** sys.argv ***", sys.argv)

    parser = argparse.ArgumentParser()
    parser.add_argument("--working_dir", type=str, default='')
    parser.add_argument("--video_to_plot", type=str, default='bottom_face_1-0000')
    
    args = parser.parse_args()

    # plot_prediction(working_dir=args.working_dir, 
    #                 video_to_plot=args.video_to_plot)


    # #-------------- Convert SLEAP prediction file to csv --------------#
    fname_slp="/root/capsule/data/SLEAP_trial1_Foraging_Bot-Han_Lucas-2022-04-27/scratch/Han_data_multiple_video/Foraging_Bot-Han_Lucas-2022-04-27/shuffle1/video_shuffle1.predictions.analysis.h5"
    
    pred_slp='/root/capsule/code/sleap_video_shuffle1.predictions.analysis.csv'
    pred_DLC="/root/capsule/data/DLC_trial1_Foraging_Bot-Han_Lucas-2022-04-27/scratch/Han_data_multiple_video/Foraging_Bot-Han_Lucas-2022-04-27/videos/bottom_face_1-0000DLC_resnet50_Foraging_BotApr27shuffle1_200000.csv"
    pred_LP="/root/capsule/data/LP_trial1_Foraging_Bot-Han_Lucas-2022-04-27/config_toy-Handataset/trial1/video_preds/bottom_face_1-0000.csv"
    
    convert_slp_to_csv(fname_slp, pred_slp)

    #----------------- copy video prediction files generated by SLEAP/DLC/LP to  '/root/capsule/code/analysis_prediction/labeled_video/' ------------------------------
    video_name = "bottom_face_1-0000"
    video_file = "/root/capsule/scratch/lightning-pose/toy_datasets/toyHanData/unlabeled_videos/" + video_name + ".mp4"

    pred_video_files_tp = [pred_slp, pred_DLC, pred_LP]
    alg_names = ["SLEAP", 'DLC', "LP"]

    print("")
    print("Copy video prediction files generated by SLEAP/DLC/LP ......")

    save_pred_dir_tp = '/root/capsule/code/analysis_prediction/' + video_name 
    Path(save_pred_dir_tp).mkdir(parents=True, exist_ok=True)
    save_pred_dir = save_pred_dir_tp + '/labeled_video/'
    Path(save_pred_dir).mkdir(parents=True, exist_ok=True)

    pred_video_files = []
    for prediction_csv_file, alg_name in zip(pred_video_files_tp[:], alg_names[:]):
        print(prediction_csv_file)
        print(alg_name)

        target = save_pred_dir + '/' + alg_name + '.predictions.csv'
        pred_video_files.append(target)
        print(target)
        if os.path.exists(target)==False:
            shutil.copy(prediction_csv_file, target)


    #-------------- Generate labeled video --------------#
    print("")
    print("Generate labeled video ......")
    for prediction_csv_file, alg_name in zip(pred_video_files, alg_names):
        print(alg_name)
        print(prediction_csv_file)
        # labeled_mp4_file = '/root/capsule/code/analysis_prediction//labeled_video/' + video_name + '_labeled_' + alg_name  + '.mp4'
        labeled_mp4_file = prediction_csv_file.replace(".csv", "_labeled.mp4")

        if os.path.exists(labeled_mp4_file)==False:
            export_labeled_video(prediction_csv_file, video_file, labeled_mp4_file)


    ## --------------  Compute evaluation metrics: temporal_norm --------------#
    print("")
    print("Compute evaluation metrics: temporal_norm ......")
    # save_dir = save_pred_dir_tp + '/eval_metrics/'
    # Path(save_dir).mkdir(parents=True, exist_ok=True)

    temporal_norm_files = []
    for prediction_csv_file, alg_name in zip(pred_video_files[:], alg_names[:]):
        print(alg_name)
        print(prediction_csv_file)
        save_file = prediction_csv_file.replace(".csv", ".temporal_norm.csv")
        temporal_norm_files.append(save_file)
        if os.path.exists(save_file)==False:
            compute_metrics_temporal(prediction_csv_file, save_file)

    ## --------------  Plot trajectory for body part (x, y coordinates, confidance, temporal norm loss)--------------#
    print("")
    print("Plot trajectory for body part (x, y coordinates, confidance, temporal norm loss).....")
    print("pred_video_files:", pred_video_files)
    print("temporal_norm_files:", temporal_norm_files)
    save_dir = save_pred_dir_tp + '/trajectory/'
    Path(save_dir).mkdir(parents=True, exist_ok=True)

    # plot_trajectory(pred_video_files, temporal_norm_files, save_dir, video_name)


    ## --------------  compute evaluation metrics: pixel error --------------#
    print("")
    print("Compute evaluation metrics: pixel error ......")

    # load ground truth
    project_folder_name="Foraging_Bot-Han_Lucas-2022-04-27"
    labeld_data_dir = '/root/capsule/scratch/DLC_dataset_for_LP/'
    labeld_data_dir = labeld_data_dir + project_folder_name

    labels_df = labeld_data_dir + '/' + video_name  + '.csv'
    print("labels_df:", labels_df)

    # generate pixel error files for current testing video
    pixel_error_files= []
    for prediction_csv_file, alg_name in zip(pred_video_files, alg_names):
        print(alg_name)
        print(prediction_csv_file)
        save_file = prediction_csv_file.replace(".csv", ".pixel_error.csv")
        pixel_error_files.append(save_file)
        if os.path.exists(save_file)==False:
            compute_metrics_pixel_error(prediction_csv_file, labels_df)


    ## --------------  compute mean pixel error and mean temporal norm loss --------------#
    print("Loading pixel_error_files:", pixel_error_files)
    print("Loading temporal_norm_files:", temporal_norm_files)
    
    save_dir = save_pred_dir_tp + '/eval_metrics/'
    Path(save_dir).mkdir(parents=True, exist_ok=True)

    out_file = save_dir + 'pixel_error_combined.csv'
    if os.path.exists(out_file):
        os.remove(out_file)
    compute_mean_error(pixel_error_files, alg_names, out_file)

    out_file = save_dir + 'temporal_norm_combined.csv'
    if os.path.exists(out_file):
        os.remove(out_file)
    compute_mean_error(temporal_norm_files, alg_names, out_file)

